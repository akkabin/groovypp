<?xml version="1.0" encoding="UTF-8" ?>

<project name="Groovy Compiler" default="make.install">

	<property name="app.name" value="groovypp" />

    <property file="build.properties"/>
    <property name="output.dir" location="out" />
	<property name="deploy.lib.dir" location="install/lib" />
	<property name="stagingDirectory" value="${output.dir}/staging"/>
	<property name="output.instrumented.dir" value="${output.dir}/instrumented"/>

    <property name="compiler.module.name" value="Groovypp" />
    <property name="stdlib.module.name" value="StdLib" />
    <property name="stdlibtest.module.name" value="StdLibTest" />
    <property name="examples.module.name" value="Examples" />

    <property name="version" value="${groovyPPVersion}"/>
    <property name="install.zip" value="groovy-booster-${version}.zip"/>


    <property name="compiler.src" location="src" />
    <property name="compiler.tests" location="tests" />
    <property name="stdlib.src" location="${stdlib.module.name}/src" />
    <property name="stdlib.tests" location="${stdlib.module.name}/tests" />
    <property name="stdlibtest.tests" location="${stdlibtest.module.name}/tests" />
    <property name="examples.src" location="${examples.module.name}/src" />

    <property name="compiler.prod.output" location="${output.dir}/production/${compiler.module.name}" />
    <property name="compiler.test.output" location="${output.dir}/test/${compiler.module.name}" />
    <property name="stdlib.prod.output" location="${output.dir}/production/${stdlib.module.name}" />
    <property name="stdlib.test.output" location="${output.dir}/test/${stdlib.module.name}" />
    <property name="stdlibtest.prod.output" location="${output.dir}/production/${stdlibtest.module.name}" />
    <property name="stdlibtest.test.output" location="${output.dir}/test/${stdlibtest.module.name}" />
    <property name="examples.prod.output" location="${output.dir}/production/${examples.module.name}" />
	<property name="test.reports" location="${output.dir}/test-reports"/>
	<property name="cobertura.report.dir" location="${output.dir}/cobertura"/>

	<property name="jar.name" location="${output.dir}/${app.name}.jar"/>
	<property name="embeddable.jar.name" location="${output.dir}/${app.name}-all.jar"/>
	<property name="target.jvm" value="5" />

	<path id="libs">
		<fileset dir="install/lib" includes="*.jar"/>
	</path>

    <path id="compile.compiler.classpath">
		<path refid="libs"/>
	</path>

    <path id="compile.compiler.tests.classpath">
		<path refid="libs"/>
		<pathelement location="${compiler.prod.output}"/>
	</path>

    <path id="compile.stdlib.classpath">
        <path refid="libs"/>
        <pathelement location="${compiler.prod.output}"/>
    </path>

    <path id="compile.stdlib.tests.classpath">
        <path refid="libs"/>
        <pathelement location="${compiler.prod.output}"/>
        <pathelement location="${stdlib.prod.output}"/>
    </path>

    <path id="compile.stdlibtest.tests.classpath">
        <path refid="libs"/>
        <pathelement location="${compiler.prod.output}"/>
        <pathelement location="${stdlib.prod.output}"/>
    </path>

    <path id="compile.examples.classpath">
        <path refid="libs"/>
        <pathelement location="${compiler.prod.output}"/>
        <pathelement location="${stdlib.prod.output}"/>
    </path>

    <path id="tests.classpath">
        <path refid="libs"/>
        <pathelement location="${compiler.prod.output}"/>
        <pathelement location="${stdlib.prod.output}"/>
        <pathelement location="${stdlibtest.test.output}"/>
        <pathelement location="${stdlib.test.output}"/>
        <pathelement location="${compiler.test.output}"/>
    </path>

	<path id="jarjar.classpath">
		<pathelement location="lib/jarjar-1.0.jar"/>
	</path>

    <taskdef name="groovyc"
         classname="org.codehaus.groovy.ant.Groovyc"
         classpathref="libs"/>

    <taskdef name="gcupload" classname="net.bluecow.googlecode.ant.GoogleCodeUploadTask" classpath="lib/ant-googlecode-0.0.2.jar"/>
	
	<taskdef name="jarjar" classname="com.tonicsystems.jarjar.JarJarTask" classpathref="jarjar.classpath"/>
	
	<taskdef resource="tasks.properties">
		<classpath>
			<fileset dir="${deploy.lib.dir}">
				<include name="asm*.jar"/>
			</fileset>
			<fileset dir="lib/cobertura"/>
		</classpath>
	</taskdef>
	
	<target name="clean">
		<delete dir="${output.dir}"/>

        <mkdir dir="${compiler.prod.output}"/>
        <mkdir dir="${compiler.test.output}"/>
        <mkdir dir="${stdlib.prod.output}"/>
        <mkdir dir="${stdlib.test.output}"/>
        <mkdir dir="${stdlibtest.prod.output}"/>
        <mkdir dir="${stdlibtest.test.output}"/>
        <mkdir dir="${examples.prod.output}"/>
		<mkdir dir="${test.reports}"/>
	</target>

	<target name="compile.compiler" depends="releaseinfo" description="compiles compiler source files">
		<javac classpathref="compile.compiler.classpath" srcdir="${compiler.src}"
			destdir="${compiler.prod.output}" target="${target.jvm}"
			debug="yes" debuglevel="lines,vars,source" includeantruntime="no"/>
		<copy todir="${compiler.prod.output}">
			<fileset dir="${compiler.src}">
				<exclude name="**/*.java"/>
                <exclude name="**/*.groovy"/>
			</fileset>
		</copy>
        <groovyc classpathref="compile.stdlib.classpath" srcdir="${compiler.src}" destdir="${compiler.prod.output}"
        	includeantruntime="no">
        </groovyc >
	</target>

	<target name="compile.tests.compiler" depends="compile.compiler" >
		<groovyc classpathref="compile.compiler.tests.classpath" srcdir="${compiler.tests}" destdir="${compiler.test.output}"
			includeantruntime="no">
            <javac />
		</groovyc >
	</target>

    <!-- STDLIB -->
    <target name="compile.stdlib" depends="compile.tests.compiler" description="compiles stdlib">
        <groovyc classpathref="compile.stdlib.classpath" srcdir="${stdlib.src}" destdir="${stdlib.prod.output}"
        	includeantruntime="no">
        </groovyc >
        <delete file="${compiler.prod.output}/META-INF/services/org.codehaus.groovy.transform.ASRTransformation"/>
        <copy todir="${stdlib.prod.output}">
            <fileset dir="${stdlib.src}">
                <exclude name="**/*.groovy"/>
                <exclude name="**/*.java"/>
            </fileset>
        </copy>
    </target>

    <target name="compile.tests.stdlib"  depends="compile.stdlib">
        <groovyc classpathref="compile.compiler.tests.classpath" srcdir="${stdlib.tests}" fork="yes" includeantruntime="no"
            destdir="${stdlib.test.output}" verbose="true">
        </groovyc >
    </target>

    <target name="compile.tests.stdlibtest"  depends="compile.stdlib,compile.tests.stdlib,compile.tests.compiler">
        <groovyc classpathref="compile.stdlibtest.tests.classpath" srcdir="${stdlibtest.tests}" fork="yes" includeantruntime="no"
            destdir="${stdlibtest.test.output}" verbose="true">
            <javac sourcepath="${stdlibtest.tests}"/>
        </groovyc >
    </target>

    <target name="compile.examples"  depends="compile.stdlib">
        <groovyc classpathref="compile.examples.classpath" srcdir="${examples.src}" fork="yes" destdir="${examples.prod.output}"
        	verbose="true" includeantruntime="no">
            <javac sourcepath="${examples.src}"/>
        </groovyc >
    </target>

    <target name="test" depends="make.jar,coverage-instrument,compile.tests.compiler,compile.tests.stdlib" description="run unit tests">
        <junit printsummary="yes" fork="yes" forkmode="perBatch" includeantruntime="no">
            <jvmarg value="-Xmx512m"/>
            <jvmarg value="-ea"/>

            <classpath>
            	<fileset dir="lib/cobertura"/>
            	<pathelement location="${output.instrumented.dir}"/>
            	<path>
                    <fileset dir="install/lib" includes="*.jar"/>
                    <fileset file="${jar.name}"/>
                </path>
                <pathelement location="${stdlibtest.test.output}"/>
                <pathelement location="${stdlib.test.output}"/>
                <pathelement location="${compiler.test.output}"/>
            </classpath>

            <batchtest todir="${test.reports}">
                <fileset dir="${compiler.test.output}">
                    <include name="**/*Test.class"/>
                </fileset>
                <fileset dir="${stdlib.test.output}">
                    <include name="**/*Test.class"/>
                </fileset>
                <fileset dir="${stdlibtest.test.output}">
                    <include name="**/*Test.class"/>
                </fileset>
            </batchtest>
        	<formatter type="xml"/>
        </junit>

    	<junitreport todir="${test.reports}">
    		<fileset dir="${test.reports}">
    			<include name="TEST-*.xml"/>
    		</fileset>
    		<report todir="${test.reports}"/>
    	</junitreport>
	<cobertura-report destdir="${cobertura.report.dir}" format="xml">
		<fileset dir="${compiler.src}"/>
		<fileset dir="${stdlib.src}"/>
	</cobertura-report>
    </target>
	
	<target name="coverage-instrument" depends="compile.compiler, compile.stdlib">
		<cobertura-instrument todir="${output.instrumented.dir}">
			<fileset dir="${compiler.prod.output}/"/>
			<fileset dir="${stdlib.prod.output}/"/>
		</cobertura-instrument>
	</target>

    <target name="make.jar" depends="clean,compile.examples,releaseinfo" description="Build application jar file">
        <jar destfile="${jar.name}" >
            <fileset dir="${compiler.prod.output}" />
            <fileset dir="${stdlib.prod.output}" />
        </jar>
    </target>

    <target name="make.embeddable.jar" depends="make.jar"
        description="Build embeddable application jar file">
        <delete dir="${stagingDirectory}" quiet="true"/>
        <mkdir dir="${stagingDirectory}"/>
        <mkdir dir="${stagingDirectory}/groovy"/>
        <mkdir dir="${stagingDirectory}/cli"/>
        <mkdir dir="${stagingDirectory}/netty"/>

        <copy toDir="${stagingDirectory}">
            <fileset dir="${deploy.lib.dir}">
                <include name="antlr*.jar"/>
                <include name="asm*.jar"/>

                <exclude name="asm-attr*.jar"/>
                <exclude name="asm-util*.jar"/>
                <exclude name="asm-analysis*.jar"/>
            </fileset>
            <fileset dir="out">
                <include name="groovypp.jar"/>
            </fileset>
        </copy>

        <unzip dest="${stagingDirectory}/groovy">
            <patternset>
                <exclude name="META-INF/MANIFEST.MF"/>
            </patternset>
            <globmapper from="META-INF/LICENSE.txt" to="META-INF/GROOVY-LICENSE.txt"/>
            <fileset dir="${deploy.lib.dir}">
                <include name="groovy-1.8.0-beta-1-SNAPSHOT.jar" />
            </fileset>
        </unzip>
        <unzip dest="${stagingDirectory}/cli">
            <patternset>
                <exclude name="META-INF/MANIFEST.MF"/>
            </patternset>
            <globmapper from="META-INF/LICENSE.txt" to="META-INF/CLI-LICENSE.txt"/>
            <fileset dir="${deploy.lib.dir}">
                <include name="commons-cli-*.jar"/>
            </fileset>
        </unzip>
        <unzip dest="${stagingDirectory}/netty">
            <patternset>
                <exclude name="META-INF/MANIFEST.MF"/>
            </patternset>
            <mapper>
                <globmapper from="META-INF/LICENSE.txt" to="META-INF/NETTY-LICENSE.txt"/>
                <globmapper from="META-INF/COPYRIGHT.txt" to="META-INF/NETTY-COPYRIGHT.txt"/>
			</mapper>
            <fileset dir="${deploy.lib.dir}">
                <include name="netty-*.jar"/>
            </fileset>
        </unzip>

        <jarjar jarfile="${embeddable.jar.name}">
            <zipgroupfileset dir="${stagingDirectory}" includes="*.jar" />
            <fileset dir="${stagingDirectory}/groovy" />
            <fileset dir="${stagingDirectory}/cli" />
            <fileset dir="${stagingDirectory}/netty" />
            <rule pattern="antlr.**" result="groovyjarjarantlr.@1"/>
            <rule pattern="org.objectweb.**" result="groovyjarjarasm.@1"/>
            <rule pattern="org.apache.commons.cli.**" result="groovyjarjarcommonscli.@1"/>
        </jarjar>
    </target>

    <target name="releaseinfo">
        <copy file="${compiler.src}/META-INF/groovypp-release-info.properties" 
            todir="${compiler.prod.output}/META-INF" overwrite="true">
        </copy>
        <tstamp>
            <format property="release.date" pattern="dd-MMM-yyyy"/>
            <format property="release.time" pattern="hh:mm aa"/>
        </tstamp>
        <replace file="${compiler.prod.output}/META-INF/groovypp-release-info.properties">
          <replacefilter token="##ImplementationVersion##" value="${groovyPPVersion}"/>   
          <replacefilter token="##BuildDate##" value="${release.date}"/>
          <replacefilter token="##BuildTime##" value="${release.time}"/>
        </replace>
    </target>

    <target name="make.install" depends="test,make.embeddable.jar" description="Build installation">
        <zip destfile="${install.zip}"
             comment="The Groovy Booster binary distribution.">

            <zipfileset dir="install" prefix=""/>
            <zipfileset file="${jar.name}" prefix="lib"/>
			<zipfileset file="${embeddable.jar.name}" prefix="lib"/>
            <zipfileset dir="${compiler.tests}" prefix="booster/tests"/>
            <zipfileset dir="${stdlib.tests}" prefix="booster/tests"/>
            <zipfileset dir="${stdlibtest.tests}" prefix="booster/tests"/>
            <zipfileset dir="${examples.src}" prefix="booster/examples"/>
            <zipfileset dir="${stdlib.src}" prefix="booster/stdlib"/>

        </zip>
    </target>
	
    <target name="publish-googlecode" depends="make.install">
	<gcupload username="${googlecode.user}" password="${googlecode.password}" projectname="groovypptest"
    	    filename="${install.zip}" targetfilename="${install.zip}" summary="Groovy++ ${version}"
	    labels="Featured" verbose="true"/>
    </target>
</project>
