<?xml version="1.0" encoding="UTF-8" ?>

<!--
  ~ Copyright 2009-2010 MBTE Sweden AB.
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~      http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<project xmlns:ivy="antlib:org.apache.ivy.ant" name="Groovy Compiler" default="dist">

	<property name="app.name" value="groovypp" />

    <property file="build.properties"/>
    <property name="output.dir" location="out" />
	<property name="deploy.lib.dir" location="install/lib" />
	<property name="stagingDirectory" value="${output.dir}/staging"/>
	<property name="output.instrumented.dir" value="${output.dir}/instrumented"/>

    <property name="compiler.module.name" value="Groovypp" />
    <property name="stdlib.module.name" value="StdLib" />
    <property name="examples.module.name" value="Examples" />
    <property name="gretty.module.name" value="Gretty" />
    <property name="grailspp.module.name" value="Grailspp" />

    <property name="version" value="${groovyPPVersion}"/>
    <property name="install.zip" value="${output.dir}/groovypp-${version}.zip"/>
    <property name="grails.zip" value="${output.dir}/grails-groovy-plus-plus-${version}.zip"/>
    <property name="src.zip" value="${output.dir}/groovypp-src-${version}.zip"/>


    <property name="compiler.src" location="Compiler/src" />
    <property name="compiler.tests" location="Compiler/tests" />
    <property name="stdlib.src" location="${stdlib.module.name}/src" />
    <property name="gretty.src" location="${gretty.module.name}/src" />
    <property name="gretty.tests" location="${gretty.module.name}/tests" />
    <property name="stdlib.tests" location="${stdlib.module.name}/tests" />
    <property name="examples.src" location="${examples.module.name}/src" />
    <property name="grailspp.src" location="${grailspp.module.name}/src" />
    <property name="grailspp.tests" location="${grailspp.module.name}/tests" />

    <property name="compiler.prod.output" location="${output.dir}/production/${compiler.module.name}" />
    <property name="compiler.test.output" location="${output.dir}/test/${compiler.module.name}" />
    <property name="stdlib.prod.output" location="${output.dir}/production/${stdlib.module.name}" />
    <property name="stdlib.test.output" location="${output.dir}/test/${stdlib.module.name}" />
    <property name="gretty.prod.output" location="${output.dir}/production/${gretty.module.name}" />
    <property name="gretty.test.output" location="${output.dir}/test/${gretty.module.name}" />
    <property name="grailspp.prod.output" location="${output.dir}/production/${grailspp.module.name}" />
    <property name="grailspp.test.output" location="${output.dir}/test/${grailspp.module.name}" />
    <property name="examples.prod.output" location="${output.dir}/production/${examples.module.name}" />
	<property name="test.reports" location="${output.dir}/test-reports"/>
    <property name="test.reports.jar" location="${output.dir}/test-reports-jars"/>
	<property name="cobertura.report.dir" location="${output.dir}/cobertura"/>

	<property name="jar.name" location="${output.dir}/${app.name}-${version}.jar"/>
    <property name="gretty.jar.name" location="${output.dir}/gretty-${version}.jar"/>
    <property name="gretty.all.jar.name" location="${output.dir}/gretty-all-${version}.jar"/>
    <property name="grailspp.all.jar.name" location="${output.dir}/grailspp-all-${version}.jar"/>
	<property name="embeddable.jar.name" location="${output.dir}/${app.name}-all-${version}.jar"/>
	<property name="target.jvm" value="5" />

	<property name="skipTests" value="false"/>

    <path id="ivy.lib.path">
        <fileset dir="lib" includes="ivy*.jar"/>
    </path>

    <taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path"/>

    <path id="libs">
		<fileset dir="install/lib" includes="*.jar"/>
	</path>

    <path id="ivy.cache">
		<fileset dir="ivy.cache" includes="*.jar"/>
	</path>

    <path id="gretty.libs">
        <fileset dir="${gretty.module.name}/lib" includes="*.jar"/>
    </path>

    <path id="compile.compiler.classpath">
		<path refid="libs"/>
	</path>

    <path id="compile.compiler.tests.classpath">
		<path refid="libs"/>
        <pathelement location="${compiler.prod.output}"/>
        <pathelement location="${stdlib.prod.output}"/>
	</path>

    <path id="compile.stdlib.classpath">
        <path refid="libs"/>
        <pathelement location="${compiler.prod.output}"/>
    </path>

    <path id="compile.stdlib.tests.classpath">
        <path refid="libs"/>
        <pathelement location="${compiler.prod.output}"/>
        <pathelement location="${stdlib.prod.output}"/>
    </path>

    <path id="compile.examples.classpath">
        <path refid="libs"/>
        <path refid="gretty.libs"/>
        <pathelement location="${compiler.prod.output}"/>
        <pathelement location="${stdlib.prod.output}"/>
        <pathelement location="${gretty.prod.output}"/>
    </path>

    <path id="compile.gretty.classpath">
        <path refid="libs"/>
        <path refid="gretty.libs"/>
        <pathelement location="${compiler.prod.output}"/>
        <pathelement location="${stdlib.prod.output}"/>
        <path refid="ivy.cache"/>
    </path>

    <path id="compile.gretty.classpath2">
        <path refid="compile.gretty.classpath"/>
        <pathelement location="${gretty.prod.output}"/>
    </path>

    <path id="compile.gretty.tests.classpath">
        <path refid="compile.gretty.classpath"/>
        <pathelement location="${gretty.prod.output}"/>
    </path>

    <path id="compile.grailspp.classpath">
        <path refid="libs"/>
        <path refid="gretty.libs"/>
        <pathelement location="${compiler.prod.output}"/>
        <pathelement location="${stdlib.prod.output}"/>
        <pathelement location="${gretty.prod.output}"/>
        <path refid="ivy.cache"/>
    </path>

    <path id="compile.grailspp.tests.classpath">
        <path refid="compile.grailspp.classpath"/>
        <pathelement location="${grailspp.prod.output}"/>
    </path>

    <path id="tests.classpath">
        <path refid="libs"/>
        <pathelement location="${compiler.prod.output}"/>
        <pathelement location="${stdlib.prod.output}"/>
        <pathelement location="${stdlib.test.output}"/>
        <pathelement location="${compiler.test.output}"/>
        <pathelement location="${gretty.test.output}"/>
    </path>

	<path id="jarjar.classpath">
		<pathelement location="lib/jarjar-1.0.jar"/>
	</path>

	<path id="groovypp.runtime.classpath">
		<pathelement location="${jar.name}"/>
		<fileset dir="install/lib">
			<include name="antlr*.jar"/>
			<include name="asm*.jar"/>
			<include name="netty-*.jar"/>
			<include name="commons-cli-*.jar"/>
			<include name="groovy-1.7.5.jar" />

			<exclude name="asm-attr*.jar"/>
			<exclude name="asm-util*.jar"/>
			<exclude name="asm-analysis*.jar"/>
		</fileset>
	</path>

	<condition property="_skipTests_">
		<istrue value="${skipTests}"/>
	</condition>

        <condition property="_forceCoverage_">
            <and>
                <not>
                    <istrue value="${skipTests}"/>
                </not>
                <istrue value="${forceCoverage}"/>
            </and>
        </condition>

    <taskdef name="groovyc"
         classname="org.codehaus.groovy.ant.Groovyc"
         classpathref="libs"/>

    <taskdef name="gcupload" classname="net.bluecow.googlecode.ant.GoogleCodeUploadTask" classpath="lib/ant-googlecode-0.0.2.jar"/>

	<taskdef name="jarjar" classname="com.tonicsystems.jarjar.JarJarTask" classpathref="jarjar.classpath"/>

	<taskdef resource="tasks.properties">
		<classpath>
			<fileset dir="${deploy.lib.dir}">
				<include name="asm*.jar"/>
			</fileset>
			<fileset dir="lib/cobertura"/>
		</classpath>
	</taskdef>

	<target name="clean">
        <delete dir="ivy.cache"/>
		<delete dir="${output.dir}"/>
        <delete dir="Grailspp/lib"/>
        <mkdir dir="Grailspp/lib"/>
		<delete file="cobertura.ser" quiet="true"/>
        <ivy:retrieve pattern="ivy.cache/[artifact]-[revision].[ext]" type="jar,bundle" sync="true" conf="default"/>
    </target>

	<target name="compile.compiler" depends="releaseinfo" description="compiles compiler source files">
        <javac classpathref="compile.compiler.classpath" srcdir="${compiler.src}"
			destdir="${compiler.prod.output}" target="${target.jvm}"
			debug="yes" debuglevel="lines,vars,source" includeantruntime="no" fork="true"/>
		<copy todir="${compiler.prod.output}">
			<fileset dir="Compiler/src">
				<exclude name="**/*.java"/>
                <exclude name="**/*.groovy"/>
			</fileset>
		</copy>
        <groovyc classpathref="compile.stdlib.classpath" srcdir="${compiler.src}" destdir="${compiler.prod.output}"
        	includeantruntime="no" fork="yes">
        </groovyc >
        <copy todir="${compiler.prod.output}" overwrite="true">
            <fileset dir="${stdlib.src}">
                <exclude name="**/*.java"/>
                <exclude name="**/*.groovy"/>
            </fileset>
        </copy>
        <move todir="${compiler.test.output}">
            <fileset dir="${compiler.prod.output}">
              <include name="**/*$GrUnitTest*.class"/>
            </fileset>
        </move>
	</target>

	<target name="compile.tests.compiler" depends="compile.compiler,compile.stdlib" >
        <mkdir dir="${compiler.test.output}"/>
		<groovyc classpathref="compile.compiler.tests.classpath" srcdir="${compiler.tests}" destdir="${compiler.test.output}"
			includeantruntime="no" fork="yes">
            <javac  target="${target.jvm}" />
		</groovyc >
	</target>

    <!-- STDLIB -->
    <target name="compile.stdlib" depends="compile.compiler" description="compiles stdlib">
        <mkdir dir="${stdlib.prod.output}"/>
        <groovyc classpathref="compile.stdlib.classpath" srcdir="${stdlib.src}" destdir="${stdlib.prod.output}"
        	includeantruntime="no" fork="yes">
            <javac sourcepath="${stdlib.src}"  target="${target.jvm}" />
        </groovyc >
        <move todir="${stdlib.test.output}">
            <fileset dir="${stdlib.prod.output}">
              <include name="**/*$GrUnitTest*.class"/>
            </fileset>        
        </move>
        <copy todir="${stdlib.prod.output}/META-INF">
            <fileset dir="StdLib/src/META-INF">
                <exclude name="**/*ASTTransformation"/>
            </fileset>
        </copy>
        <jar destfile="${jar.name}" >
            <fileset dir="${compiler.prod.output}" />
            <fileset dir="${stdlib.prod.output}" />
        </jar>
        <jarjar jarfile="${embeddable.jar.name}">
            <fileset dir="${compiler.prod.output}" />
            <fileset dir="${stdlib.prod.output}" />
            <rule pattern="org.objectweb.**" result="groovyjarjarasm.@1"/>
        </jarjar>
    </target>

    <target name="compile.tests.stdlib"  depends="compile.gretty">
	    <mkdir dir="${stdlib.test.output}"/>
        <groovyc classpathref="compile.compiler.tests.classpath" srcdir="${stdlib.tests}" fork="yes" includeantruntime="no"
            destdir="${stdlib.test.output}" verbose="true" >
        </groovyc >
    </target>

    <target name="compile.gretty" depends="compile.stdlib" description="compiles Gretty">
        <mkdir dir="${gretty.prod.output}"/>
        <javac classpathref="compile.gretty.classpath" srcdir="${gretty.src}"
			destdir="${gretty.prod.output}" target="${target.jvm}"
			debug="yes" debuglevel="lines,vars,source" includeantruntime="no" fork="true"/>
        <groovyc classpathref="compile.gretty.classpath2" srcdir="${gretty.src}" destdir="${gretty.prod.output}"
        	includeantruntime="no" fork="yes">
        </groovyc >
        <move todir="${gretty.test.output}">
            <fileset dir="${gretty.prod.output}">
              <include name="**/*$GrUnitTest*.class"/>
            </fileset>
        </move>
        <copy todir="${gretty.prod.output}/META-INF">
            <fileset dir="Gretty/src/META-INF"/>
        </copy>

        <jar destfile="${gretty.jar.name}" >
            <fileset dir="${gretty.prod.output}" />
        </jar>

        <jarjar jarfile="${gretty.all.jar.name}">
            <fileset dir="${gretty.prod.output}" />
            <rule pattern="org.objectweb.**" result="groovyjarjarasm.@1"/>
        </jarjar>
    </target>

    <target name="compile.tests.gretty"  depends="compile.gretty">
	    <mkdir dir="${gretty.test.output}"/>
        <groovyc classpathref="compile.gretty.tests.classpath" srcdir="${gretty.tests}" fork="yes" includeantruntime="no"
            destdir="${gretty.test.output}" verbose="true" >
        </groovyc >
    </target>

    <target name="compile.grailspp" depends="compile.gretty" description="compiles Grailspp">
        <mkdir dir="${grailspp.prod.output}"/>
        <groovyc classpathref="compile.grailspp.classpath" srcdir="${grailspp.src}" destdir="${grailspp.prod.output}"
        	includeantruntime="no" fork="yes">
        </groovyc >
        <copy todir="${grailspp.prod.output}/META-INF">
            <fileset dir="${grailspp.src}/META-INF"/>
        </copy>

        <jarjar jarfile="${grailspp.all.jar.name}">
            <fileset dir="${grailspp.prod.output}" />
            <rule pattern="org.objectweb.**" result="groovyjarjarasm.@1"/>
        </jarjar>
    </target>

    <target name="compile.tests.grailspp" depends="compile.grailspp" description="compiles Grailspp tests">
        <mkdir dir="${grailspp.test.output}"/>
        <groovyc classpathref="compile.grailspp.tests.classpath" srcdir="${grailspp.tests}" destdir="${grailspp.test.output}"
        	includeantruntime="no" fork="yes">
        </groovyc >
    </target>

    <target name="compile.examples"  depends="compile.tests.stdlib,compile.gretty">
        <mkdir dir="${examples.prod.output}"/>
        <groovyc classpathref="compile.examples.classpath" srcdir="${examples.src}" fork="yes" destdir="${examples.prod.output}"
        	verbose="true" includeantruntime="no">
            <javac sourcepath="${examples.src}"  target="${target.jvm}"/>
        </groovyc >
    </target>

    <target name="clean-test" depends="clean,test" description="run unit tests"/>

    <target name="test" depends="coverage-instrument,compile.tests.compiler,compile.tests.stdlib,compile.tests.gretty,compile.tests.grailspp"
            description="run unit tests" unless="_skipTests_">
        <mkdir dir="${test.reports}"/>
        <junit printsummary="yes" fork="yes" forkmode="perBatch" includeantruntime="no">
            <jvmarg value="-Xmx512m"/>
            <jvmarg value="-ea"/>

            <classpath>
				<fileset dir="lib/cobertura"/>
            	<pathelement location="${output.instrumented.dir}"/>
	            
                <pathelement location="${stdlib.prod.output}"/>
                <pathelement location="${compiler.prod.output}"/>
                <pathelement location="${gretty.prod.output}"/>
                <pathelement location="${grailspp.prod.output}"/>
            	<path>
                    <fileset dir="install/lib" includes="*.jar"/>
                </path>
                <path refid="gretty.libs"/>
                <pathelement location="${stdlib.test.output}"/>
                <pathelement location="${compiler.test.output}"/>
                <pathelement location="${gretty.test.output}"/>
                <pathelement location="${grailspp.test.output}"/>
                <fileset dir="ivy.cache"/>
            </classpath>

            <batchtest todir="${test.reports}">
                <fileset dir="${compiler.test.output}">
                    <include name="**/*Test.class"/>
                </fileset>
                <fileset dir="${stdlib.test.output}">
                    <include name="**/*Test.class"/>
                </fileset>
                <fileset dir="${gretty.test.output}">
                    <include name="**/*Test.class"/>
                </fileset>
                <fileset dir="${grailspp.test.output}">
                    <include name="**/*Test.class"/>
                </fileset>
            </batchtest>
        	<formatter type="xml"/>
        </junit>

    	<junitreport todir="${test.reports}">
    		<fileset dir="${test.reports}">
    			<include name="TEST-*.xml"/>
    		</fileset>
    		<report todir="${test.reports}"/>
    	</junitreport>
    </target>

    <target name="test.jar" depends="clean,make.jar,compile.tests.compiler,compile.tests.stdlib,compile.tests.gretty"
            description="run unit tests against jars" unless="_skipTests_">
        <mkdir dir="${test.reports.jar}"/>
        <junit printsummary="yes" fork="yes" forkmode="perBatch" includeantruntime="no">
            <jvmarg value="-Xmx512m"/>
            <jvmarg value="-ea"/>

            <classpath>
            	<path>
                    <fileset dir="install/lib" includes="*.jar"/>
                    <fileset file="${jar.name}"/>
                    <fileset file="${gretty.jar.name}"/>
                </path>
                <path refid="gretty.libs"/>
                <pathelement location="${stdlib.test.output}"/>
                <pathelement location="${compiler.test.output}"/>
                <pathelement location="${gretty.test.output}"/>
            </classpath>

            <batchtest todir="${test.reports.jar}">
                <fileset dir="${compiler.test.output}">
                    <include name="**/*Test.class"/>
                </fileset>
                <fileset dir="${stdlib.test.output}">
                    <include name="**/*Test.class"/>
                </fileset>
                <fileset dir="${gretty.test.output}">
                    <include name="**/*Test.class"/>
                </fileset>
            </batchtest>
        	<formatter type="xml"/>
        </junit>

    	<junitreport todir="${test.reports.jar}">
    		<fileset dir="${test.reports.jar}">
    			<include name="TEST-*.xml"/>
    		</fileset>
    		<report todir="${test.reports.jar}"/>
    	</junitreport>
    </target>

	<target name="coverage-instrument"
	        depends="compile.compiler,compile.stdlib" if="_forceCoverage_">
		<cobertura-instrument todir="${output.instrumented.dir}">
			<fileset dir="${compiler.prod.output}/"/>
			<fileset dir="${stdlib.prod.output}/"/>
		</cobertura-instrument>
	</target>

	<target name="coverage-report">
		<cobertura-report destdir="${cobertura.report.dir}" format="xml">
			<fileset dir="Compiler/src"/>
			<fileset dir="${stdlib.src}"/>
		</cobertura-report>
	</target>

    <target name="make.jar" depends="test,compile.examples" description="Build application jar file">
    </target>

    <target name="make.embeddable.jar" depends="make.jar"
        description="Build embeddable application jar file">
        <delete dir="${stagingDirectory}" quiet="true"/>

        <copy toDir="${stagingDirectory}">
            <fileset dir="${deploy.lib.dir}">
                <include name="antlr*.jar"/>
                <include name="asm*.jar"/>

                <exclude name="asm-attr*.jar"/>
                <exclude name="asm-util*.jar"/>
                <exclude name="asm-analysis*.jar"/>
            </fileset>
        </copy>

        <unzip dest="${stagingDirectory}/groovy">
            <patternset>
                <exclude name="META-INF/MANIFEST.MF"/>
            </patternset>
            <globmapper from="META-INF/LICENSE.txt" to="META-INF/GROOVY-LICENSE.txt"/>
            <fileset dir="${deploy.lib.dir}">
                <include name="groovy-1.7.5.jar" />
            </fileset>
        </unzip>
        <unzip dest="${stagingDirectory}/cli">
            <patternset>
                <exclude name="META-INF/MANIFEST.MF"/>
            </patternset>
            <globmapper from="META-INF/LICENSE.txt" to="META-INF/CLI-LICENSE.txt"/>
            <fileset dir="${deploy.lib.dir}">
                <include name="commons-cli-*.jar"/>
            </fileset>
        </unzip>
	    <unzip dest="${stagingDirectory}/groovypp">
		    <fileset dir="out">
		        <include name="${app.name}-${version}.jar"/>
		    </fileset>
	    </unzip>
	    <unzip dest="${stagingDirectory}/junit">
		    <patternset>
		        <exclude name="META-INF/MANIFEST.MF"/>
		    </patternset>
		    <mapper>
		        <globmapper from="LICENSE.txt" to="META-INF/JUNIT-LICENSE.txt"/>
			</mapper>
		    <fileset dir="${deploy.lib.dir}">
		        <include name="junit-*.jar"/>
		    </fileset>
	    </unzip>

	    <!-- Concatenate the AST Transform definitions, and remove groovypp's  ASTTransformation fil
	        to avoid clashes -->
	    <concat destfile="${stagingDirectory}/groovy/META-INF/services/org.codehaus.groovy.transform.ASTTransformation"
		    append="true">
		    <header filtering="no" trimleading="yes">
			    # Added by Groovy++
		    </header>
		    <filelist dir="${stagingDirectory}/groovypp/META-INF/services"
			       files="org.codehaus.groovy.transform.ASTTransformation"/>
	    </concat>

	    <delete
			file="${stagingDirectory}/groovypp/META-INF/services/org.codehaus.groovy.transform.ASTTransformation" />

        <jarjar jarfile="${embeddable.jar.name}">
            <zipgroupfileset dir="${stagingDirectory}" includes="*.jar" />
            <fileset dir="${stagingDirectory}/groovy" />
	        <fileset dir="${stagingDirectory}/groovypp" />
            <fileset dir="${stagingDirectory}/cli" />
	        <fileset dir="${stagingDirectory}/junit" />
            <rule pattern="antlr.**" result="groovyjarjarantlr.@1"/>
            <rule pattern="org.objectweb.**" result="groovyjarjarasm.@1"/>
            <rule pattern="org.apache.commons.cli.**" result="groovyjarjarcommonscli.@1"/>
        </jarjar>
    </target>

    <target name="releaseinfo">
        <copy file="Compiler/src/META-INF/groovypp-release-info.properties"
            todir="${compiler.prod.output}/META-INF" overwrite="true">
        </copy>
        <tstamp>
            <format property="release.date" pattern="dd-MMM-yyyy"/>
            <format property="release.time" pattern="hh:mm aa"/>
        </tstamp>
        <replace file="${compiler.prod.output}/META-INF/groovypp-release-info.properties">
          <replacefilter token="##ImplementationVersion##" value="${groovyPPVersion}"/>
          <replacefilter token="##BuildDate##" value="${release.date}"/>
          <replacefilter token="##BuildTime##" value="${release.time}"/>
        </replace>
    </target>

    <target name="update.poms">
        <delete      dir      = "${output.dir}/maven"/>
        <copy        toDir    = "${output.dir}/maven"
                     verbose  = "true">
            <fileset dir      = "maven"
                     includes = "**/pom.xml"/>
            <filterset>
                <filter token = "version"
                        value = "${version}"/>
            </filterset>
        </copy>
    </target>

    <target name="make.install" depends="make.embeddable.jar" description="Build installation">

		<!-- Prepare scripts to run with renamed groovy jar -->
		<delete dir="tempbin" quiet="true" />
		<mkdir dir="tempbin" />
		<copy todir="tempbin">
			<fileset dir="install/bin" />
		</copy>

		<replaceregexp match="groovy-1.7.5(.*).jar"
				replace="groovy-1.7.5\1-${version}.jar"
				byline="true">
			<fileset dir="tempbin" includes="startGroovy*"/>
		</replaceregexp>

        <zip destfile="${install.zip}"
             comment="The Groovy++ binary distribution.">
	        <zipfileset dir="install" prefix="" >
		        <!--<exclude name="embeddable/**" />-->
		        <!--<exclude name="lib/groovy-1.7.5*.jar" />-->
		        <exclude name="bin/**" />
	        </zipfileset>

	        <mappedresources>
		        <fileset dir="install/lib">
			        <include name="groovy-1.7.5.jar" />
		        </fileset>
		        <globmapper from="groovy-1.7.5*.jar"
		                    to="lib/groovy-1.7.5*-${version}.jar"/>
	        </mappedresources>

            <zipfileset dir="Gretty/lib" prefix="lib/gretty" />
            <zipfileset file="${jar.name}" prefix="lib"/>
            <zipfileset file="${gretty.jar.name}" prefix="lib/gretty"/>
			<zipfileset file="${embeddable.jar.name}" prefix="embeddable"/>
            <zipfileset file="${gretty.all.jar.name}" prefix="embeddable"/>
	        <zipfileset dir="tempbin" prefix="bin"/>
        </zip>

        <delete dir="tempbin" quiet="true" />
    </target>

    <target name="make.grails" depends="make.embeddable.jar, compile.grailspp" description="Build Grails Plugin">
		<delete dir="tempbin" quiet="true" />
		<mkdir dir="tempbin" />

		<copy todir="tempbin">
			<fileset dir="Grailspp">
                <exclude name="src/**"/>
                <exclude name="*.iml"/>
            </fileset>
		</copy>

		<replaceregexp match="#version"
				replace="${version}"
				byline="true">
			<fileset dir='tempbin'/>
		</replaceregexp>

        <zip destfile="${grails.zip}"
             comment="The Groovy++ Grails Plugin binary distribution.">
	        <zipfileset dir="tempbin" prefix="" />
            <zipfileset dir="Gretty/lib" prefix="lib" />
            <zipfileset file="install/lib/junit-4.8.1" prefix="lib" />
            <zipfileset file="${embeddable.jar.name}" prefix="lib"/>
            <zipfileset file="${grailspp.all.jar.name}" prefix="lib"/>
            <zipfileset file="${gretty.all.jar.name}" prefix="lib"/>
        </zip>

        <delete dir="tempbin" quiet="true" />
    </target>

    <target name="reinstall.grails.plugin" >
        <exec executable="/Development/grails-1.3.5/bin/grails" dir="GppGrailsTest">
            <arg value="uninstall-plugin"/>
            <arg value="groovy-plus-plus"/>
        </exec>
        <exec executable="/Development/grails-1.3.5/bin/grails" dir="GppGrailsTest">
            <arg value="install-plugin"/>
            <arg value="${grails.zip}"/>
        </exec>
    </target>

    <target name="package.src" description="Package sources">
        <zip destfile="${src.zip}" basedir="." comment="The Groovy++ source distribution">
		<include name="install/"/>
		<include name="lib/"/>
		<include name="maven/"/>
		<include name="Compiler/"/>
		<include name="StdLib/"/>
        <include name="Gretty/"/>
		<include name="Examples/"/>
        <include name="Grailspp/"/>
        <include name="GppGrailsTest/"/>
		<include name="build.properties"/>
		<include name="build.xml"/>
		<include name="build.properties"/>
        </zip>
    </target>
	
	<target name="dist" depends="clean, make.install, make.grails, package.src" description="build the distribution archives"/>

	<target name="check.groovypp.jar">
	    <available file="${jar.name}" property="groovypp.jar.present"/>
	</target>

	<macrodef name="run.benchmark">
		<attribute name="className"/>
        <attribute name="benchmarkArgs"/>
		<sequential >
			<echo message="==== Running @{className} @{benchmarkArgs} ====" />
			<java classname="@{className}" fork="true">
				<classpath>
					<path refid="groovypp.runtime.classpath" />
					<pathelement path="${examples.prod.output}" />
				</classpath>
				<jvmarg value="-server"/>
				<jvmarg value="-Xmx512m"/>
                <arg value="@{benchmarkArgs}"/>
			</java>
		</sequential>
	</macrodef>

	<!--, clean, compile.examples-->
	<target name="run.benchmarks" depends="check.groovypp.jar">
		<fail message="No groovypp.jar. Please build one first" unless="groovypp.jar.present"/>
		<echo message="Running benchmarks" />
		<record name="benchmarks.txt" action="start" />

		<run.benchmark className="shootout.bintrees.BinaryTrees" benchmarkargs="20"/>
		<run.benchmark className="shootout.bintrees.BinaryTreesGroovy" benchmarkargs="20"/>

        <run.benchmark className="shootout.fasta.fasta" benchmarkargs="25000000"/>
        <run.benchmark className="shootout.fasta.FastaGroovy" benchmarkargs="25000000"/>

        <run.benchmark className="shootout.threadring.ThreadRing" benchmarkargs="5000000"/>
        <run.benchmark className="shootout.threadring.ThreadRingGroovy" benchmarkargs="5000000"/>

        <run.benchmark className="shootout.spectralnorm.SpectralNorm" benchmarkargs="5500"/>
        <run.benchmark className="shootout.spectralnorm.SpectralNormGroovy" benchmarkargs="5500"/>

		<run.benchmark className="shootout.fannkuch.Fannkuch" benchmarkargs="12"/>
		<run.benchmark className="shootout.fannkuch.FannkuchGroovy" benchmarkargs="12"/>

<!--
		<run.benchmark className="shootout.knucleotide.KNucleotide" benchmarkargs=""/>
		<run.benchmark className="shootout.knucleotide.KNucleotideGroovy" benchmarkargs=""/>

		<run.benchmark className="shootout.meteor.meteor" benchmarkargs="2098"/>
		<run.benchmark className="shootout.meteor.MeteorGroovy" benchmarkargs="2098"/>
-->

		<run.benchmark className="shootout.mandelbrot.Mandelbrot" benchmarkargs="16000"/>
		<run.benchmark className="shootout.mandelbrot.MandelbrotGroovy" benchmarkargs="16000"/>

		<run.benchmark className="shootout.nbody.nbody" benchmarkargs="500000"/>
		<run.benchmark className="shootout.nbody.NbodyGroovy" benchmarkargs="500000"/>

		<run.benchmark className="shootout.pidigits.pidigits" benchmarkargs="10000"/>
		<run.benchmark className="shootout.pidigits.PiDigitsGroovy" benchmarkargs="10000"/>

		<run.benchmark className="shootout.chameneos.ChameneosRedux" benchmarkargs="60000"/>
		<run.benchmark className="shootout.chameneos.ChameneosReduxGroovy" benchmarkargs="60000"/>


		<java classname="shootout.revcomp.revcomp" fork="true">
			<classpath>
				<path refid="groovypp.runtime.classpath" />
				<pathelement path="${examples.prod.output}" />
			</classpath>
			<jvmarg value="-server"/>
			<jvmarg value="-Xmx512m"/>
			<redirector input="${examples.src}/shootout/revcomp-input.txt" />
		</java>

		<java classname="shootout.revcomp.RevCompGroovy" fork="true">
			<classpath>
				<path refid="groovypp.runtime.classpath" />
				<pathelement path="${examples.prod.output}" />
			</classpath>
			<jvmarg value="-server"/>
			<jvmarg value="-Xmx512m"/>
			<redirector input="${examples.src}/shootout/revcomp-input.txt" />
		</java>

		<record name="benchmarks.txt" action="stop" />

		<run.benchmark className="shootout.BenchmarkResultPrinter" benchmarkargs=""/>
	</target>

    <target name="publish-googlecode" depends="dist">
	    <gcupload username="${googlecode.user}" password="${googlecode.password}" projectname="groovypptest"
    	    filename="${install.zip}" targetfilename="${install.zip}" summary="Groovy++ ${version}"
	    labels="Featured" verbose="true"/>
        <gcupload username="${googlecode.user}" password="${googlecode.password}" projectname="groovypptest"
                filename="${src.zip}" targetfilename="${src.zip}" summary="Groovy++ Sources ${version}"
            labels="Featured" verbose="true"/>
        <gcupload username="${googlecode.user}" password="${googlecode.password}" projectname="groovypptest"
            filename="${grails.zip}" targetfilename="${grails.zip}" summary="Groovy++ Grails Plugin ${version}"
        labels="Featured" verbose="true"/>
    </target>
</project>
