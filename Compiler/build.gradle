apply plugin: 'groovy'
apply plugin: 'idea'
apply plugin: 'maven'

group = 'org.mbte.groovypp'
version = '0.4.190'

repositories {
    mavenCentral()

    mavenRepo urls: new File("${System.getProperty('user.home')}/.m2/repository").toURL().toString()

    mavenRepo urls: 'http://groovypp.artifactoryonline.com/groovypp/libs-releases-local/'
}

dependencies {
    groovy(group: 'org.codehaus.groovy', name: 'groovy', version: '1.7.8')

    compile(group: 'org.codehaus.groovy', name: 'groovy', version: '1.7.8')
    compile(group: 'org.mbte.groovypp', name: 'groovypp', version: '0.4.182')
    compile "junit:junit:4.8.1"
}

sourceSets {
    compiler {
        groovy {
            srcDir file("./src")
        }
        classesDir = file('../Compiler/build/classes/main')
    }
    stdlib {
        groovy {
            srcDir file("../StdLib/src")
        }
        classesDir = file('../Compiler/build/classes/main')
    }
}

task copyMetaInf << {
  def myFile = file("../Compiler/build/classes/main/META-INF/groovypp-release-info.properties")

  copy {
    from file('../Compiler/src/META-INF')
    into file('../Compiler/build/classes/main/META-INF')
  }

  copy {
      from file('../StdLib/src/META-INF')
      into file('../Compiler/build/classes/main/META-INF')
  }

  def src = myFile.text
  src = src.replaceAll("##ImplementationVersion##", version)

  def dateTime = new Date()
  src = src.replaceAll("##BuildDate##", dateTime.format("dd-MMM-yyyy"))
  src = src.replaceAll("##BuildTime##", dateTime.format("hh:mm aa"))

  myFile.text = src
}

compileGroovy.dependsOn << [compileCompilerGroovy, compileStdlibGroovy, copyMetaInf]

task sourcesJar(type: Jar) {
     baseName = 'groovypp'
     classifier = 'sources'
     from sourceSets.compiler.allSource + sourceSets.stdlib.allSource
}

task allSourcesJar(type: Jar) {
     baseName = 'groovypp'
     classifier = 'sources'
     appendix = 'all'
     from sourceSets.compiler.allSource + sourceSets.stdlib.allSource
}

task nodepSourcesJar(type: Jar) {
     baseName = 'groovypp'
     classifier = 'sources'
     appendix = 'nodep'
     from sourceSets.compiler.allSource + sourceSets.stdlib.allSource
}

task allNodepSourcesJar(type: Jar) {
     baseName = 'groovypp'
     classifier = 'sources'
     appendix = 'all-nodep'
     from sourceSets.compiler.allSource + sourceSets.stdlib.allSource
}

jar {
    from = file('../Compiler/build/classes/main')
    dependsOn << compileGroovy
    baseName = 'groovypp'
}

task allJar(type:Jar, dependsOn:[jar]) {
    appendix = 'all'
    baseName = 'groovypp'

    doLast {
      ant.taskdef(name:'jarjar', classname: 'com.tonicsystems.jarjar.JarJarTask', classpath: '../lib/jarjar-1.0.jar')

      ant.jarjar(jarfile: "build/libs/groovypp-all-${version}.jar") {
          zipfileset(dir: 'build/classes/main')
          rule(pattern:"org.objectweb.**", result:"groovyjarjarasm.@1")
      }
    }
}

task nodepAllJar(type:Jar, dependsOn:[jar]) {
    appendix = 'all-nodep'
    baseName = 'groovypp'

    doLast {
      ant.taskdef(name:'jarjar', classname: 'com.tonicsystems.jarjar.JarJarTask', classpath: '../lib/jarjar-1.0.jar')

      ant.jarjar(jarfile: "build/libs/groovypp-all-nodep-${version}.jar") {
          zipfileset(dir: 'build/classes/main')
          rule(pattern:"org.objectweb.**", result:"groovyjarjarasm.@1")
      }
    }
}

task nodepJar(type:Jar, dependsOn:jar) {
  appendix = 'nodep'
  baseName = 'groovypp'

  doLast {
    ant.jar(jarfile: "build/libs/groovypp-nodep-${version}.jar") {
        zipfileset(dir: 'build/classes/main')
    }
  }
}

artifacts {
    archives sourcesJar
    archives nodepSourcesJar
    archives allNodepSourcesJar
    archives allSourcesJar
    archives jar
    archives allJar
    archives nodepJar
    archives nodepAllJar
}

uploadArchives.doFirst {
  println 'copying archives'
  ant.copy(file: "build/libs/groovypp-${version}.jar", tofile:"build/libs/groovypp-nodep-${version}.jar")
}

uploadArchives {
    repositories.mavenDeployer {
        def repo = "http://groovypp.artifactoryonline.com/groovypp/libs-releases-local/"
        if(System.getProperty("repo") == 'local')
          repo = "file://" + new File(System.getProperty('user.home'),  ".m2" + File.separatorChar + "repository").absolutePath

        repository(url: repo) {
            authentication(userName: ARTIFACTORY_USER, password: ARTIFACTORY_PASSWORD)
        }

        addFilter('groovypp') {artifact, file ->
            !artifact.toString().contains('-all') && !artifact.toString().contains('-nodep')
        }
        addFilter('groovypp-nodep') {artifact, file ->
            !artifact.toString().contains('-all')  && artifact.toString().contains('-nodep')
        }.whenConfigured { pom ->
          pom.dependencies = []
        }
        addFilter('groovypp-all-nodep') {artifact, file ->
            artifact.toString().contains('-all')  && artifact.toString().contains('-nodep')
        }.whenConfigured { pom ->
          pom.dependencies = []
        }
        addFilter('groovypp-all') {artifact, file ->
            artifact.toString().contains('-all') && !artifact.toString().contains('-nodep')
        }.whenConfigured { pom ->
          pom.dependencies.each { dep ->
            if(dep.artifactId == 'groovy') {
              dep.artifactId = 'groovy-all'
            }
          }
        }
    }
}
